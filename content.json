{"meta":{"title":"一谷","subtitle":"Rest in the Hope.","description":"Big Data and Data Science","author":"yicoo","url":"https://Galaxy-ht.github.io","root":"/"},"pages":[],"posts":[{"title":"Matplotlib绘图","slug":"Matplotlib绘图","date":"2021-11-07T17:41:31.000Z","updated":"2021-11-12T18:12:37.925Z","comments":true,"path":"2021/11/08/Matplotlib绘图/","link":"","permalink":"https://galaxy-ht.github.io/2021/11/08/Matplotlib%E7%BB%98%E5%9B%BE/","excerpt":"","text":"写在前面的废话曲线图散点图柱状图饼图面积图直方图箱型图3D图 0.写在前面的废话 用Matplotlib绘图主要有两种方法： 一、pyplot绘图第一种是最常见的，即通过调用pyplot的apiimport matplotlib.pyplot as plt的plt去直接绘图这种方式主要用于交互式绘图和编程绘图生成简单图例。 二、面向对象的APIMatplotlib的核心是面向对象的。如果需要对 plots 进行更多控制和自定义，我们建议直接使用对象。在许多情况下，您将使用 pyplot.subplots创建一个 图形和一个或多个轴，然后处理这些对象。这种方法是我们需要去掌握的，也是比较推荐使用的，即用fig, ax = plt.subplots()指定figure和axes，然后对axes单独操作。 figure axes axis（图片源于网络） 这种方式较pyplot的方式可以进行更细致的精调。 三、两种方式的区别两种绘图方式plt.plot()和ax.plot()有什么区别呢 123456789#第一种方式plt.figure()plt.plot([1, 2, 3], [4, 5, 6])plt.show()# 第二种方式fig, ax = plt.subplots()ax.plot([1, 2, 3], [4, 5, 6])plt.show() 先来看看它们各自生成的结果 第一种方式第二种方式 可以发现它们生成的图像完全一致。 但从代码来看，第一种方式先生成了一个Figure画布，然后在这个画布上隐式生成一个画图区域进行画图。第二种方式同时生成了Figure和axes两个对象，然后用ax对象在其区域内进行绘图。显然第二种方式更加易于解释，生成的fig和ax分别对画布Figure和绘图区域Axes进行控制，第一种方式反而显得不是很直观，如果涉及到子图零部件的设置，第二种方式显然会更易于使用。 这里主要以近期作业为实例介绍Matplotlib绘图的方法。 1.曲线图 利用plt.plot绘制股票趋势图。 完整代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344# 导入所需包import numpy as np import pandas as pdimport matplotlib.pyplot as plt# 导入数据集google = pd.read_csv(&#x27;C:/Users/一谷/Desktop/PythonData/GOOGL_data.csv&#x27;)facebook = pd.read_csv(&#x27;C:/Users/一谷/Desktop/PythonData/FB_data.csv&#x27;)apple = pd.read_csv(&#x27;C:/Users/一谷/Desktop/PythonData/AAPL_data.csv&#x27;)amazon = pd.read_csv(&#x27;C:/Users/一谷/Desktop/PythonData/AMZN_data.csv&#x27;)microsoft = pd.read_csv(&#x27;C:/Users/一谷/Desktop/PythonData/MSFT_data.csv&#x27;)# 创建画布，figsize指定长和宽（英寸）；dpi指定每英寸分辨率，默认80plt.figure(figsize=(16, 8), dpi=100)# 绘曲线图，指定x、y值和标签plt.plot(&#x27;date&#x27;, &#x27;close&#x27;, data=google, label=&#x27;Google&#x27;)plt.plot(&#x27;date&#x27;, &#x27;close&#x27;, data=facebook, label=&#x27;Facebook&#x27;)plt.plot(&#x27;date&#x27;, &#x27;close&#x27;, data=apple, label=&#x27;Apple&#x27;)plt.plot(&#x27;date&#x27;, &#x27;close&#x27;, data=amazon, label=&#x27;Amazon&#x27;)plt.plot(&#x27;date&#x27;, &#x27;close&#x27;, data=microsoft, label=&#x27;Microsoft&#x27;)# 指定x，y的起始位与终止位及它们间的步长；rotation表示刻度lables的倾斜度plt.xticks(np.arange(0, 1260, 40), rotation=70)plt.yticks(np.arange(0, 1450, 100))#指定标题与轴lable及它们的大小plt.title(&#x27;Stock trend&#x27;, fontsize=16)plt.ylabel(&#x27;Closing price in $&#x27;, fontsize=14)# 显示网格plt.grid()# 展示曲线图像标签plt.legend()plt.show() 五家公司的股票趋势图 2.散点图 123456import matplotlib. pyplot as plt import numpy as npx = np. array ([1, 2, 3, 4, 5, 6, 7, 8]) y = np. array ( [1, 4, 9, 16, 7, 11, 23, 18])plt.scatter(x, y)plt.show() 散点图 12345678910111213141516# 散点图加颜色import matplotlib. pyplot as plt import numpy as np# 首先有图(fig)，然后有轴(ax)fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(7, 5), dpi=100)x = np.array([5, 7, 8, 7, 2, 17, 2, 9, 4, 11, 12, 9, 6])y = np.array([99, 86, 105, 87, 86, 103, 87, 94, 78, 77, 85, 86, 99])plt.scatter(x, y, color=&#x27;hotpink&#x27;)x = np.array([2, 2, 8, 1, 15, 8, 12, 9, 7, 3, 11, 4, 7])y = np.array([100, 105, 84, 105, 90, 99, 95, 94, 100, 79, 112, 91, 80])plt.scatter(x, y, color=&#x27;green&#x27;)plt.show() 散点图加颜色 12345678910111213141516171819# 设置数据点大小，并显示colorbarimport matplotlib. pyplot as plt import numpy as npfrom numpy.core.defchararray import arrayx = np.array([1, 2, 3, 4, 5, 6, 7])y = np.array([1, 4, 9, 16, 25, 36, 49])# sizes = np.array([……])sizes = np.random.randint(500, size=x.shape)# 首先有图(fig)，然后有轴(ax)fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(7, 5), dpi=100)# 绘制散点图plt.scatter(x, y, s=sizes)plt.colorbar()plt.show() 设置散点图大小与色板 12345678910111213141516171819202122232425262728# 设置透明程度，即气泡图import matplotlib. pyplot as plt import numpy as np# 随机数生成器的种子# np.random.seed(12)# 支持中文与负号plt.rcParams[&#x27;font.sans-serif&#x27;] = [&#x27;SimHei&#x27;] # 用来正常显示中文标签plt.rcParams[&#x27;axes.unicode_minus&#x27;] = False # 用来正常显示负号N = 50x = np.random.rand(N)y = np.random.rand(N)colors = np.random.rand(N)area = (30 * np.random.rand(N))**2 # 0 to 15 point radii# 首先有图(fig)，然后有轴(ax)fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(7, 5), dpi=100)# 绘制气泡图plt.scatter(x, y, s=area ,c=colors, alpha=0.5) # 设置颜色即透明度plt.title(&quot;气泡图&quot;) # 设置标题plt.colorbar()plt.show() 气泡图 3.柱状图 123456789101112import matplotlib. pyplot as plt import numpy as np# 生成序列并随机排列value = np.arange(3,8)np.random.shuffle(value)# 绘制柱状图lables = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;]plt.bar(lables, value, width=0.5)plt.show() 柱状图（单序列） 123456789101112131415161718192021# 两个序列import matplotlib. pyplot as plt import numpy as np# 生成序列并随机排列size = 5value1 = np.random.randint(10, size=(size, 1)).reshape(1,-1)value1 = value1[0]value2 = np.random.randint(20, size=(size, 1)).reshape(1,-1)value2 = value2[0]# value1 = np.random.random(size=size)# value2 = np.random.random(size=size)# 绘制柱状图width=0.4x = np.arange(size)plt.bar(x-width/2, value1, width=width, label=&#x27;A&#x27;)plt.bar(x+width/2, value2, width=width, label=&#x27;B&#x27;)plt.legend()plt.show() 柱状图（两个序列） 12345678910111213141516171819202122232425262728293031323334353637# 3个序列+网格import matplotlib. pyplot as plt import numpy as np# 生成序列并随机排列size = 5x = np.arange(size)a = np.random.random(size)b = np.random.random(size)c = np.random.random(size)# 总宽度，序列数total_width, n = 0.8, 3# 单个序列宽度width = total_width / n# 第一个序列坐标x = x - (total_width - width) / 2# 绘制柱状图plt.bar(x, a, width=width, label=&#x27;A&#x27;)plt.bar(x+width, b, width=width, label=&#x27;B&#x27;)plt.bar(x+width*2, c, width=width, label=&#x27;C&#x27;)# 网格线# plt.grid(linestyle=&#x27;:&#x27;, linewidth=1)plt.rcParams[&quot;axes.grid.axis&quot;] = &quot;y&quot;plt.rcParams[&quot;axes.grid&quot;] = True# 水平线与垂直线plt.axhline(y=0.5, ls=&#x27;:&#x27;, c=&quot;red&quot;)plt.axvline(x=np.mean(x), ls=&quot;--&quot;, c=&quot;green&quot;)# 坐标xlabels = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;]plt.xticks(np.arange(len(xlabels)), xlabels)plt.legend()plt.show() 柱状图（三个序列）+网格线 4.面积图 5.饼图 5.直方图 6.箱型图 7.3D图","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"https://galaxy-ht.github.io/tags/Python/"},{"name":"数据可视化","slug":"数据可视化","permalink":"https://galaxy-ht.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"}]},{"title":"是谁住在深海的大菠萝里~~","slug":"Hello-world-0","date":"2021-10-22T17:02:40.000Z","updated":"2021-11-09T00:54:39.156Z","comments":true,"path":"2021/10/23/Hello-world-0/","link":"","permalink":"https://galaxy-ht.github.io/2021/10/23/Hello-world-0/","excerpt":"","text":"海绵宝宝！","categories":[],"tags":[{"name":"The first page.","slug":"The-first-page","permalink":"https://galaxy-ht.github.io/tags/The-first-page/"}]}],"categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"https://galaxy-ht.github.io/tags/Python/"},{"name":"数据可视化","slug":"数据可视化","permalink":"https://galaxy-ht.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"},{"name":"The first page.","slug":"The-first-page","permalink":"https://galaxy-ht.github.io/tags/The-first-page/"}]}